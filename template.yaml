AWSTemplateFormatVersion: "2010-09-09"
Description: Discord Webhook Forwarder for CloudWatch Alarms (Python 3.12)

Parameters:
  DiscordWebhookUrl:
    Type: String
    NoEcho: true
    Description: Discord webhook URL

Resources:
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-cloudwatch-alerts"
      DisplayName: "CloudWatch Alerts"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DiscordWebhookFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: discord_webhook_lambda.handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 15
      MemorySize: 256
      Architectures:
        - x86_64
      Description: Forwards CloudWatch alarm notifications from SNS to Discord webhook
      Environment:
        Variables:
          DISCORD_WEBHOOK_URL: !Ref DiscordWebhookUrl
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "OK"}

  LambdaPermissionForSNS:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DiscordWebhookFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AlarmTopic

  AlarmSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlarmTopic
      Protocol: lambda
      Endpoint: !GetAtt DiscordWebhookFunction.Arn

Outputs:
  FunctionName:
    Description: Lambda function name
    Value: !Ref DiscordWebhookFunction
  SnsTopicArn:
    Description: SNS Topic ARN to use in CloudWatch Alarms
    Value: !Ref AlarmTopic
